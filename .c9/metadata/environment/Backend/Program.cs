{"filter":false,"title":"Program.cs","tooltip":"/Backend/Program.cs","undoManager":{"mark":5,"position":5,"stack":[[{"start":{"row":0,"column":0},"end":{"row":44,"column":0},"action":"remove","lines":["var builder = WebApplication.CreateBuilder(args);","","// Add services to the container.","// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle","builder.Services.AddEndpointsApiExplorer();","builder.Services.AddSwaggerGen();","","var app = builder.Build();","","// Configure the HTTP request pipeline.","if (app.Environment.IsDevelopment())","{","    app.UseSwagger();","    app.UseSwaggerUI();","}","","app.UseHttpsRedirection();","","var summaries = new[]","{","    \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"","};","","app.MapGet(\"/weatherforecast\", () =>","{","    var forecast =  Enumerable.Range(1, 5).Select(index =>","        new WeatherForecast","        (","            DateOnly.FromDateTime(DateTime.Now.AddDays(index)),","            Random.Shared.Next(-20, 55),","            summaries[Random.Shared.Next(summaries.Length)]","        ))","        .ToArray();","    return forecast;","})",".WithName(\"GetWeatherForecast\")",".WithOpenApi();","","app.Run();","","record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)","{","    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);","}",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":179,"column":0},"action":"insert","lines":["using Microsoft.EntityFrameworkCore;","using System.Text;","using System.Security.Cryptography;","using Isopoh.Cryptography.Argon2;","","var builder = WebApplication.CreateBuilder(args);","","// Configurar conexión a MySQL","builder.Services.AddDbContext<ApiDbContext>(options =>","    options.UseMySql(","        builder.Configuration.GetConnectionString(\"DefaultConnection\"),","        new MySqlServerVersion(new Version(8, 0, 36))","    ));","","builder.Services.AddOpenApi();","","var app = builder.Build();","","if (app.Environment.IsDevelopment())","{","    app.MapOpenApi();","}","","// --------------------- Endpoints ---------------------"," ","app.MapGet(\"/\", () => Results.Redirect(\"/inicio\"));","","app.MapGet(\"/inicio\", () => \"¡Bienvenido a Inicio!\");","","// Obtener todos los usuarios","app.MapGet(\"/usuarios\", async (ApiDbContext db) =>","{","    var usuarios = await db.users","        .Select(u => new UsersDto","        {","            id = u.id,","            email = u.email,","            first_name = u.first_name,","            last_name = u.last_name,","            phone = u.phone,","            curp = u.curp,","            birth_date = u.birth_date,","            address = u.address,","            user_type = u.user_type,","            is_active = u.is_active,","            created_at = u.created_at","        })","        .ToListAsync();","","    return Results.Ok(usuarios);","})",".WithName(\"ObtenerUsuarios\");","","// Obtener usuario por ID","app.MapGet(\"/usuario/{id}\", async (ApiDbContext db, int id) =>","{","    var user = await db.users","        .Where(u => u.id == id)","        .Select(u => new UsersDto","        {","            id = u.id,","            email = u.email,","            first_name = u.first_name,","            last_name = u.last_name,","            phone = u.phone,","            curp = u.curp,","            birth_date = u.birth_date,","            address = u.address,","            user_type = u.user_type,","            is_active = u.is_active,","            created_at = u.created_at","        })","        .FirstOrDefaultAsync();","","    return user is not null","        ? Results.Ok(user)","        : Results.NotFound(new { mensaje = \"Usuario no encontrado\" });","})",".WithName(\"ObtenerUsuarioPorId\");","","// Eliminar usuario","app.MapDelete(\"/usuario/{id:int}\", async (ApiDbContext db, int id) =>","{","    var usuario = await db.users.FindAsync(id);","    if (usuario == null)","        return Results.NotFound(new { mensaje = \"Usuario no encontrado\" });","","    db.users.Remove(usuario);","    await db.SaveChangesAsync();","    return Results.Ok(new { mensaje = $\"Usuario {usuario.first_name} {usuario.last_name} eliminado correctamente\" });","})",".WithName(\"EliminarUsuario\");","","// --------------------- Crear Usuario ---------------------","app.MapPost(\"/usuario\", async (ApiDbContext db, UsersCreateDto dto) =>","{","    // Validaciones","    if (string.IsNullOrWhiteSpace(dto.first_name) || string.IsNullOrWhiteSpace(dto.curp))","        return Results.BadRequest(new { mensaje = \"Nombre y CURP son obligatorios\" });","","    if (dto.birth_date.HasValue && dto.birth_date > DateTime.Today)","        return Results.BadRequest(new { mensaje = \"Fecha de nacimiento inválida\" });","","    if (await db.users.AnyAsync(u => u.email == dto.email))","        return Results.BadRequest(new { mensaje = \"Email ya registrado\" });","","    if (!string.IsNullOrWhiteSpace(dto.curp) && await db.users.AnyAsync(u => u.curp == dto.curp))","        return Results.BadRequest(new { mensaje = \"CURP ya registrado\" });","","    // Hashear contraseña con Argon2id","    string passwordHash = Argon2.Hash(dto.password);","","    var user = new Users","    {","        email = dto.email,","        password_hash = passwordHash,","        first_name = dto.first_name,","        last_name = dto.last_name,","        phone = dto.phone,","        curp = dto.curp,","        birth_date = dto.birth_date,","        address = dto.address,","        user_type = dto.user_type,","        is_active = true","    };","","    db.users.Add(user);","    await db.SaveChangesAsync();","","    var resultDto = new UsersDto","    {","        id = user.id,","        email = user.email,","        first_name = user.first_name,","        last_name = user.last_name,","        phone = user.phone,","        curp = user.curp,","        birth_date = user.birth_date,","        address = user.address,","        user_type = user.user_type,","        is_active = user.is_active,","        created_at = user.created_at","    };","","    return Results.Ok(resultDto);","});","","// --------------------- Login ---------------------","app.MapPost(\"/login\", async (ApiDbContext db, LoginDto login) =>","{","    var user = await db.users.FirstOrDefaultAsync(u => u.email == login.email);","","    if (user == null)","        return Results.NotFound(new { mensaje = \"Usuario no encontrado\" });","","    if (string.IsNullOrWhiteSpace(user.user_type))","        user.user_type = \"YOUTH\";","","    // Verificar contraseña usando Argon2","    bool passwordValida = Argon2.Verify(user.password_hash, login.password);","","    if (!passwordValida)","        return Results.BadRequest(new { mensaje = \"Contraseña incorrecta\" });","","    var result = new","    {","        id = user.id,","        email = user.email,","        first_name = user.first_name,","        last_name = user.last_name,","        user_type = user.user_type","    };","","    return Results.Ok(result);","});","","","","app.Run();",""]}],[{"start":{"row":4,"column":0},"end":{"row":5,"column":0},"action":"insert","lines":["using Microsoft.AspNetCore.OpenApi;",""],"id":3}],[{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"insert","lines":["",""],"id":4}],[{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"remove","lines":["",""],"id":5},{"start":{"row":4,"column":35},"end":{"row":5,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":179,"column":0},"action":"remove","lines":["using Microsoft.EntityFrameworkCore;","using System.Text;","using System.Security.Cryptography;","using Isopoh.Cryptography.Argon2;","using Microsoft.AspNetCore.OpenApi;","var builder = WebApplication.CreateBuilder(args);","","// Configurar conexión a MySQL","builder.Services.AddDbContext<ApiDbContext>(options =>","    options.UseMySql(","        builder.Configuration.GetConnectionString(\"DefaultConnection\"),","        new MySqlServerVersion(new Version(8, 0, 36))","    ));","","builder.Services.AddOpenApi();","","var app = builder.Build();","","if (app.Environment.IsDevelopment())","{","    app.MapOpenApi();","}","","// --------------------- Endpoints ---------------------"," ","app.MapGet(\"/\", () => Results.Redirect(\"/inicio\"));","","app.MapGet(\"/inicio\", () => \"¡Bienvenido a Inicio!\");","","// Obtener todos los usuarios","app.MapGet(\"/usuarios\", async (ApiDbContext db) =>","{","    var usuarios = await db.users","        .Select(u => new UsersDto","        {","            id = u.id,","            email = u.email,","            first_name = u.first_name,","            last_name = u.last_name,","            phone = u.phone,","            curp = u.curp,","            birth_date = u.birth_date,","            address = u.address,","            user_type = u.user_type,","            is_active = u.is_active,","            created_at = u.created_at","        })","        .ToListAsync();","","    return Results.Ok(usuarios);","})",".WithName(\"ObtenerUsuarios\");","","// Obtener usuario por ID","app.MapGet(\"/usuario/{id}\", async (ApiDbContext db, int id) =>","{","    var user = await db.users","        .Where(u => u.id == id)","        .Select(u => new UsersDto","        {","            id = u.id,","            email = u.email,","            first_name = u.first_name,","            last_name = u.last_name,","            phone = u.phone,","            curp = u.curp,","            birth_date = u.birth_date,","            address = u.address,","            user_type = u.user_type,","            is_active = u.is_active,","            created_at = u.created_at","        })","        .FirstOrDefaultAsync();","","    return user is not null","        ? Results.Ok(user)","        : Results.NotFound(new { mensaje = \"Usuario no encontrado\" });","})",".WithName(\"ObtenerUsuarioPorId\");","","// Eliminar usuario","app.MapDelete(\"/usuario/{id:int}\", async (ApiDbContext db, int id) =>","{","    var usuario = await db.users.FindAsync(id);","    if (usuario == null)","        return Results.NotFound(new { mensaje = \"Usuario no encontrado\" });","","    db.users.Remove(usuario);","    await db.SaveChangesAsync();","    return Results.Ok(new { mensaje = $\"Usuario {usuario.first_name} {usuario.last_name} eliminado correctamente\" });","})",".WithName(\"EliminarUsuario\");","","// --------------------- Crear Usuario ---------------------","app.MapPost(\"/usuario\", async (ApiDbContext db, UsersCreateDto dto) =>","{","    // Validaciones","    if (string.IsNullOrWhiteSpace(dto.first_name) || string.IsNullOrWhiteSpace(dto.curp))","        return Results.BadRequest(new { mensaje = \"Nombre y CURP son obligatorios\" });","","    if (dto.birth_date.HasValue && dto.birth_date > DateTime.Today)","        return Results.BadRequest(new { mensaje = \"Fecha de nacimiento inválida\" });","","    if (await db.users.AnyAsync(u => u.email == dto.email))","        return Results.BadRequest(new { mensaje = \"Email ya registrado\" });","","    if (!string.IsNullOrWhiteSpace(dto.curp) && await db.users.AnyAsync(u => u.curp == dto.curp))","        return Results.BadRequest(new { mensaje = \"CURP ya registrado\" });","","    // Hashear contraseña con Argon2id","    string passwordHash = Argon2.Hash(dto.password);","","    var user = new Users","    {","        email = dto.email,","        password_hash = passwordHash,","        first_name = dto.first_name,","        last_name = dto.last_name,","        phone = dto.phone,","        curp = dto.curp,","        birth_date = dto.birth_date,","        address = dto.address,","        user_type = dto.user_type,","        is_active = true","    };","","    db.users.Add(user);","    await db.SaveChangesAsync();","","    var resultDto = new UsersDto","    {","        id = user.id,","        email = user.email,","        first_name = user.first_name,","        last_name = user.last_name,","        phone = user.phone,","        curp = user.curp,","        birth_date = user.birth_date,","        address = user.address,","        user_type = user.user_type,","        is_active = user.is_active,","        created_at = user.created_at","    };","","    return Results.Ok(resultDto);","});","","// --------------------- Login ---------------------","app.MapPost(\"/login\", async (ApiDbContext db, LoginDto login) =>","{","    var user = await db.users.FirstOrDefaultAsync(u => u.email == login.email);","","    if (user == null)","        return Results.NotFound(new { mensaje = \"Usuario no encontrado\" });","","    if (string.IsNullOrWhiteSpace(user.user_type))","        user.user_type = \"YOUTH\";","","    // Verificar contraseña usando Argon2","    bool passwordValida = Argon2.Verify(user.password_hash, login.password);","","    if (!passwordValida)","        return Results.BadRequest(new { mensaje = \"Contraseña incorrecta\" });","","    var result = new","    {","        id = user.id,","        email = user.email,","        first_name = user.first_name,","        last_name = user.last_name,","        user_type = user.user_type","    };","","    return Results.Ok(result);","});","","","","app.Run();",""],"id":6}],[{"start":{"row":0,"column":0},"end":{"row":183,"column":0},"action":"insert","lines":["using Microsoft.EntityFrameworkCore;","using System.Text;","using System.Security.Cryptography;","using Isopoh.Cryptography.Argon2;","","var builder = WebApplication.CreateBuilder(args);","","// --------------------- Configuración de servicios ---------------------","","// Configurar conexión a MySQL","builder.Services.AddDbContext<ApiDbContext>(options =>","    options.UseMySql(","        builder.Configuration.GetConnectionString(\"DefaultConnection\"),","        new MySqlServerVersion(new Version(8, 0, 36))","    ));","","// Swagger (documentación de la API)","builder.Services.AddEndpointsApiExplorer();","builder.Services.AddSwaggerGen();","","var app = builder.Build();","","// --------------------- Middleware ---------------------","if (app.Environment.IsDevelopment())","{","    app.UseSwagger();","    app.UseSwaggerUI();","}","","// --------------------- Endpoints ---------------------","","app.MapGet(\"/\", () => Results.Redirect(\"/inicio\"));","","app.MapGet(\"/inicio\", () => \"¡Bienvenido a Inicio!\");","","// Obtener todos los usuarios","app.MapGet(\"/usuarios\", async (ApiDbContext db) =>","{","    var usuarios = await db.users","        .Select(u => new UsersDto","        {","            id = u.id,","            email = u.email,","            first_name = u.first_name,","            last_name = u.last_name,","            phone = u.phone,","            curp = u.curp,","            birth_date = u.birth_date,","            address = u.address,","            user_type = u.user_type,","            is_active = u.is_active,","            created_at = u.created_at","        })","        .ToListAsync();","","    return Results.Ok(usuarios);","})",".WithName(\"ObtenerUsuarios\");","","// Obtener usuario por ID","app.MapGet(\"/usuario/{id}\", async (ApiDbContext db, int id) =>","{","    var user = await db.users","        .Where(u => u.id == id)","        .Select(u => new UsersDto","        {","            id = u.id,","            email = u.email,","            first_name = u.first_name,","            last_name = u.last_name,","            phone = u.phone,","            curp = u.curp,","            birth_date = u.birth_date,","            address = u.address,","            user_type = u.user_type,","            is_active = u.is_active,","            created_at = u.created_at","        })","        .FirstOrDefaultAsync();","","    return user is not null","        ? Results.Ok(user)","        : Results.NotFound(new { mensaje = \"Usuario no encontrado\" });","})",".WithName(\"ObtenerUsuarioPorId\");","","// Eliminar usuario","app.MapDelete(\"/usuario/{id:int}\", async (ApiDbContext db, int id) =>","{","    var usuario = await db.users.FindAsync(id);","    if (usuario == null)","        return Results.NotFound(new { mensaje = \"Usuario no encontrado\" });","","    db.users.Remove(usuario);","    await db.SaveChangesAsync();","    return Results.Ok(new { mensaje = $\"Usuario {usuario.first_name} {usuario.last_name} eliminado correctamente\" });","})",".WithName(\"EliminarUsuario\");","","// --------------------- Crear Usuario ---------------------","app.MapPost(\"/usuario\", async (ApiDbContext db, UsersCreateDto dto) =>","{","    // Validaciones","    if (string.IsNullOrWhiteSpace(dto.first_name) || string.IsNullOrWhiteSpace(dto.curp))","        return Results.BadRequest(new { mensaje = \"Nombre y CURP son obligatorios\" });","","    if (dto.birth_date.HasValue && dto.birth_date > DateTime.Today)","        return Results.BadRequest(new { mensaje = \"Fecha de nacimiento inválida\" });","","    if (await db.users.AnyAsync(u => u.email == dto.email))","        return Results.BadRequest(new { mensaje = \"Email ya registrado\" });","","    if (!string.IsNullOrWhiteSpace(dto.curp) && await db.users.AnyAsync(u => u.curp == dto.curp))","        return Results.BadRequest(new { mensaje = \"CURP ya registrado\" });","","    // Hashear contraseña con Argon2id","    string passwordHash = Argon2.Hash(dto.password);","","    var user = new Users","    {","        email = dto.email,","        password_hash = passwordHash,","        first_name = dto.first_name,","        last_name = dto.last_name,","        phone = dto.phone,","        curp = dto.curp,","        birth_date = dto.birth_date,","        address = dto.address,","        user_type = dto.user_type,","        is_active = true","    };","","    db.users.Add(user);","    await db.SaveChangesAsync();","","    var resultDto = new UsersDto","    {","        id = user.id,","        email = user.email,","        first_name = user.first_name,","        last_name = user.last_name,","        phone = user.phone,","        curp = user.curp,","        birth_date = user.birth_date,","        address = user.address,","        user_type = user.user_type,","        is_active = user.is_active,","        created_at = user.created_at","    };","","    return Results.Ok(resultDto);","});","","// --------------------- Login ---------------------","app.MapPost(\"/login\", async (ApiDbContext db, LoginDto login) =>","{","    var user = await db.users.FirstOrDefaultAsync(u => u.email == login.email);","","    if (user == null)","        return Results.NotFound(new { mensaje = \"Usuario no encontrado\" });","","    if (string.IsNullOrWhiteSpace(user.user_type))","        user.user_type = \"YOUTH\";","","    // Verificar contraseña usando Argon2","    bool passwordValida = Argon2.Verify(user.password_hash, login.password);","","    if (!passwordValida)","        return Results.BadRequest(new { mensaje = \"Contraseña incorrecta\" });","","    var result = new","    {","        id = user.id,","        email = user.email,","        first_name = user.first_name,","        last_name = user.last_name,","        user_type = user.user_type","    };","","    return Results.Ok(result);","});","","app.Run();",""],"id":7}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":15,"column":0},"end":{"row":15,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1758854669606,"hash":"18d7234de1bf2c8189393edb80e7e1a305134e2f"}